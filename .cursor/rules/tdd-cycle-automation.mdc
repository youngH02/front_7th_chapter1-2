---
description: TDD 7단계 자동 사이클 - 명세서 입력 시 전체 워크플로우 실행
alwaysApply: true
---

# TDD 자동 사이클 오케스트레이터

사용자가 **"TDD:"** 키워드로 시작하는 메시지를 보내면 자동으로 TDD 6단계를 순차 실행합니다.

## 🎯 작동 방식

입력 명세는 `docs/project_spec` 폴더에 마크다운으로 저장하고, 저장된 문서를 모든 단계의 기본 컨텍스트로 사용합니다.

## 📝 입력 형식

```
TDD: [기능 설명]
```

예시:

```
TDD: 사용자가 검색어로 일정을 필터링할 수 있는 기능. 제목, 설명, 위치, 카테고리에서 검색합니다.
```

## 🔄 자동 실행 프로세스

### 1️⃣ 기능 스펙 생성

- 사용자 명세를 구조화된 요구사항으로 변환
- `docs/project_spec/###_slug.md` 형식으로 저장

### 2️⃣ 테스트 설계

- 기능 명세를 기반으로 테스트 시나리오 설계
- 우선순위와 범위(unit/integration) 결정

### 3️⃣ 테스트 작성 (RED)

- 실패하는 테스트 코드를 실제 파일로 작성
- 빈 구현 파일 생성하여 import 오류 방지
- `echo "q" | pnpm test [파일명]`으로 RED 상태 확인

### 4️⃣ 기능 구현 (GREEN)

- 테스트를 통과시키는 최소 구현 코드 작성
- `echo "q" | pnpm test [파일명]`으로 GREEN 상태 확인

### 5️⃣ 리팩토링

- 테스트 유지하며 코드 품질 개선
- 개선 내용을 구체적으로 명시

### 6️⃣ 최종 검증

- `pnpm vitest run`으로 최종 테스트 실행
- step1 명세와 동일하게 기능구현되었는지 확인
- 전체 기능 완성도 확인

## ⚙️ 실행 규칙

### 자동 감지

- 메시지가 "TDD:" 또는 "spec:"으로 시작하면 자동 실행합니다.
- 명세는 `docs/project_spec/###_slug.md` 형식의 새 문서로 저장합니다.
- 자동으로 6단계를 순차 실행하며, 각 단계의 결과를 자연스럽게 연결합니다.

### 단계 체이닝

1. **코드 컨벤션 적용**: 모든 코드 작성 시 `.cursor/rules/00. foundation/` 규칙 준수
2. 각 단계는 이전 단계의 결과를 자연스럽게 이어받아 실행
3. 명세 문서는 `docs/project_spec`에 저장하여 모든 단계에서 참조
4. 단계별로 실제 파일 시스템에 코드를 작성

### 출력 방식

- 각 단계마다 해당 프롬프트를 참조하여 실행
- 실제 코드를 작성하고 테스트를 실행
- 코드는 실제 파일 시스템에 작성 (`src/`, `src/__tests__`)
- 명세는 `docs/project_spec`에 번호순으로 저장
- **config 파일 수정 금지**: vite.config.ts, tsconfig.json 등 환경 설정 파일은 절대 수정하지 않음

## 📋 각 단계별 세부 프롬프트

각 단계는 다음 프롬프트를 사용:

1. [spec-generation-agent](mdc:.cursor/tdd/step01_spec_generation_agent.md) - 기능 명세 생성
2. [test-design-agent](mdc:.cursor/tdd/step02_test_design_agent.md) - 테스트 설계
3. [test-author-agent](mdc:.cursor/tdd/step03_test_author_agent.md) - 테스트 작성 (RED)
4. [feature-implementation-agent](mdc:.cursor/tdd/step04_feature_implementation_agent.md) - 기능 구현 (GREEN)
5. [refactoring-agent](mdc:.cursor/tdd/step05_refactoring_agent.md) - 리팩토링
6. [feature-verification-agent](mdc:.cursor/tdd/step06_feature_wrap_up_agent.md) - 최종 검증

## 📋 단계별 완료 요약 표시 (공통 규칙)

**⚠️ 필수**: 모든 TDD 단계 완료 시 마지막에 반드시 요약 표를 화면에 표시해야 합니다!

### 공통 요약 표 형식

각 단계별로 아래와 같은 형식의 요약 표를 **반드시 화면에 표시**:

```markdown
# 📋 STEP## [단계이름] 요약

| 항목      | 내용                     |
| --------- | ------------------------ |
| [항목1]   | [내용]                   |
| [항목2]   | [내용]                   |
| ...       | ...                      |
| 다음 단계 | [다음 단계 번호 및 이름] |
```

### 각 단계별 요약 표 항목

- **STEP01 (기능 스펙 생성)**:

  - 명세서 파일
  - 주요 기능
  - 다음 단계: 2️⃣ 테스트 설계

- **STEP02 (테스트 설계)**:

  - 설계 문서 파일
  - 총 테스트 수
  - 우선순위 분포 (High/Medium/Low)
  - 커버리지 상태
  - 다음 단계: 3️⃣ 테스트 작성 (RED)

- **STEP03 (테스트 작성 - RED)**:

  - 설계서 파일
  - 테스트 파일
  - 테스트 케이스 수
  - 테스트 상태 (실패/RED)
  - 다음 단계: 4️⃣ 기능 구현 (GREEN)

- **STEP04 (기능 구현 - GREEN)**:

  - 설계서 파일
  - 구현 파일
  - 테스트 파일
  - 테스트 상태 (통과/실패 수)
  - 다음 단계: 5️⃣ 리팩토링

- **STEP05 (리팩토링)**:

  - 변경 파일
  - 개선 내용 요약
  - 테스트 상태
  - 다음 단계: 6️⃣ 최종 검증

- **STEP06 (최종 검증)**:
  - 구현 완료 기능
  - 테스트 상태
  - 구현률
  - 코드 컨벤션 상태
  - 다음 단계: 완료

**⚠️ 중요**: 이 요약 표를 표시하지 않고는 단계를 종료할 수 없습니다!

## 🚀 예시

사용자 입력:

```
TDD: 검색 기능 구현
```

AI 자동 실행:

1. 기능 스펙 생성 및 저장 (`docs/project_spec/003_search.md`)
2. 테스트 설계
3. 테스트 코드 작성 (RED) → `src/__tests__/unit/searchFilter.spec.ts`
4. 기능 구현 (GREEN) → `src/utils/searchFilter.ts`
5. 리팩토링 (코드 품질 개선)
6. 최종 검증 (모든 테스트 통과 확인)

## ⚠️ 중요 사항

- **config 파일 수정 금지**: vite.config.ts, tsconfig.json 등 환경 설정 파일은 절대 수정하지 않음
- **테스트 실행**: `echo "q" | pnpm test [파일명]`으로 지정한 파일만 실행
- **코드 컨벤션 준수**: 모든 코드 작성 시 `.cursor/rules/00. foundation/` 규칙 준수
- 실제 파일 시스템에 코드를 작성하고 테스트 실행
- 리팩토링 시 구체적으로 어떤 부분을 어떻게 개선했는지 명시
